/* Copyright Statement:
 *
 * (C) 2005-2017 MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its
 * licensors. Without the prior written permission of MediaTek and/or its
 * licensors, any reproduction, modification, use or disclosure of MediaTek
 * Software, and information contained herein, in whole or in part, shall be
 * strictly prohibited. You may only use, reproduce, modify, or distribute
 * (as applicable) MediaTek Software if you have agreed to and been bound by
 * the applicable license agreement with MediaTek ("License Agreement") and
 * been granted explicit permission to do so within the License Agreement
 * ("Permitted User"). If you are not a Permitted User, please cease any
 * access or use of MediaTek Software immediately.
 */

/**
 * @addtogroup mt7682_hdk mt7682_hdk
 * @{
 * @addtogroup mt7682_hdk_apps apps
 * @{
 * @addtogroup mt7682_hdk_apps_minicli minicli
 * @{

@par Overview
  - Example project description
    - This project is a reference application to create a MiniCLI task with
      custom defined commands.
  - Features of the example project
    - This project creates a CLI task and waits for the user input through a
      serial port.
  - Output from the example
    - An output log is printed on the serial port window.

@par Hardware and software environment
  - Supported HDK
    - MediaTek LinkIt 7682 HDK.
  - Environment configuration
    - The output logs are communicated through a micro-USB cable to the PC
      from USB (CON5) connector on the HDK.
      - Install the mbed serial driver according to the instructions at
        https://developer.mbed.org/handbook/Windows-serial-configuration. For
        more information, please refer to section "Installing the LinkIt 7682
        HDK drivers on Microsoft Windows" on the "LinkIt 7682 HDK User Guide"
        in [sdk_root]/doc folder.
      - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
        MK20 micro-B USB connector on the LinkIt 7682 HDK. For more
        information about the connector cable, please refer to
        https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
      - Launch a terminal emulator program, such as Tera terminal on your PC
        for data logging through UART. For the installation details, please
        refer to section "Installing Tera terminal on Microsoft Windows" on
        the "Airoha IoT SDK for RTOS Get Started Guide" in [sdk_root]/doc folder.
      - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1,
        parity: none and flow control: off.

@par Directory contents
  - Source and header files
    - \b src/main.c:            Main program.
    - \b src/system_mt7682.c:   The configuration file of the Cortex-M4 with
                                floating point core registers and system clock
    - \b src/sys_init.c:        This file initializes the basic hardware
                                environment for the system, including system
                                clock, UART port for logging, Pinmux, cache and
                                other necessary hardware.
    - \b src/ept_eint_var.c:    The EINT configuration file generated by Easy
                                Pinmux Tool (EPT). Please do not edit the file.
    - \b src/ept_gpio_var.c:    The GPIO configuration file generated by Easy
                                Pinmux Tool (EPT). Please do not edit the file.
    - \b inc/FreeRTOSConfig.h:  FreeRTOS feature configuration file.
    - \b inc/task_def.h:        Define the task stack size, queue length,
                                project name, and priority for the application
                                to create tasks.
    - \b inc/hal_feature_config.h:
                                MT76x7 feature configuration file.
    - \b inc/flash_map.h:       MT76x7 memory layout symbol file.
    - \b inc/ept_eint_drv.h:    The EINT configuration file generated by Easy
                                Pinmux Tool (EPT). Please do not edit the file.
    - \b inc/ept_gpio_drv.h:    The GPIO configuration file generated by Easy
                                Pinmux Tool (EPT). Please do not edit the file.
    - \b inc/sys_init.h:        The header file of sys_init.c.
    - \b inc/task_def.h:        The task configuration file.
  - Project configuration files using GCC
    - \b GCC/startup_mt7682.s:  MT76x7 startup file for GCC.
    - \b GCC/syscalls.c:        The minimal implementation of the system calls.
    - \b GCC/mt7682_hdk.cmm:    This CMM is for lakrpsur development on 7682 E2
                                EVB.
    - \b GCC/feature.mk:        Feature configuration.
    - \b GCC/Makefile:          Makefile.
    - \b GCC/mt7682_flash.ld:   Linker script.
  - Project configuration files using IAR
    - \b EWARM/flash.icf:         Linker configuration file.
    - \b EWARM/minicli.ewd:       Debugger settings file.
    - \b EWARM/minicli.ewp:       Project file.
    - \b EWARM/minicli.ewt:       C-STAT and C-RUN settings.
    - \b EWARM/minicli.ewd:       Workspace file.
    - \b EWARM/startup_mt7682.s:  MT7682 startup file.

@par Run the demo
  - Connect the board to the PC with a serial port cable.
  - Build the example project with the command "./build.sh mt7682_hdk
    minicli" from the SDK root folder and download the binary file to LinkIt
    7682 development board.
  - After reboot the development board, when a login prompt is shown as below,
    provide 'admin' as user id and press enter:

        MediaTek IoT Solution
        login:

  - Then provide '123456' as password. It will fail because the CLI engine is
    looking for 'password' as the credential. Try again with 'admin' and
    'password' to get to command line.

        MediaTek IoT Solution
        login: admin
        password: *****
        login failed
        login: admin
        password: ********

  - '$' shows on the screen. Now CLI task waits for the user input to query
    the CLI commands, parameters, or execute commands.

    For example, to know what are the supported commands, use '?' and press
    enter:

        $ ?
        hello  - hello world
        echo   - show the supplied params
        cal    - do simple math
        line   - pass a line to cli engine
        tokens - pass tokens to cli engine
        count  - counter operations
        logout - end this session
        $

  - Now try entering 'hello' (an example command in this project),
    'Hello world' is printed on screen.

        $ hello
        Hello world

  - Try the sample calculating command 'cal'.

        $ cal 1 + 2
        outcome 3

  - One can use the CLI Engine to parse and execute an input string. Possible
    user scenarios are when storing history commands or adding the support of
    stored scripts. In this example, we can see that CLI engine can process
    input string 'cal 2 + 3' as a complete string token, instead of separated
    four tokens: 'cal', '2', '+', and '3'. To ensure a string is considered
    one complete token, use single quotes or double quotes to enclose it.

        $ line 'cal 2 + 3'
        outcome 5

  - The CLI Engine also provides API to support processing tokens. Same as
    the last example 'cal 2 + 3', there is no enclosing single quote in this
    example. The command 'tokens' takes the extra four tokens and feeds them
    back to CLI engine for further processing.

        $ tokens cal 3 + 4
        outcome 7

  - When commands grow more and more, it is desired to fold sub-commands in
    a parent command. In this example, the command 'count' has three
    sub-commands. When executed without paramters, the CLI engine detects
    'count' needs more options but none was given. The CLI engine shows the
    description automatically.

        $ count
        incomplete command, more options:
        show   - show counter
        tick   - increase counter
        reset  - reset counter

  - User can actively query the option, too.

        $ count ?
        show   - show counter
        tick   - increase counter
        reset  - reset counter

  - The CLI engine provides a built-in command '??', double question marks,
    for querying the whole command list, including the sub-commands.

        $ ??
        hello - hello world
        echo - show the supplied params
        cal - do simple math
        line - pass a line to cli engine
        tokens - pass tokens to cli engine
        count - counter operations
        count show - show counter
        count tick - increase counter
        count reset - reset counter
        logout - end this session

  - Now try the 'count' command family, which includes an increment command,
    a show command, and a reset command.

        $ count show
        0

        $ count tick

        $ count show
        1

        $ count reset

        $ count show
        0

  - When the things were done, the user can logout the CLI task using the
    user-implemented 'logout' command. And of course can login again and so
    on.

        $ logout
        logout

        MediaTek IoT Solution
        login: admin
        password: ********
        $ logout
        logout
        MediaTek IoT Solution
        login:

  - Now, it is time to try to add your own command.

  - Recapping the full demo, the one-piece log is listed here.

        MediaTek IoT Solution
        login: admin
        password: *****
        login failed
        login: admin
        password: ********
        $ ?
        hello  - hello world
        echo   - show the supplied params
        cal    - do simple math
        line   - pass a line to cli engine
        tokens - pass tokens to cli engine
        count  - counter operations
        logout - end this session
        $ hello
        Hello world
        $ cal 1 + 2
        outcome 3
        $ line 'cal 2 + 3'
        beware of stack overflow because this can be abused recursively
        outcome 5
        $ tokens cal 3 + 4
        beware of stack overflow because this can be abused recursively
        outcome 7
        $ count
        incomplete command, more options:
        show   - show counter
        tick   - increase counter
        reset  - reset counter
        $ count ?
        show   - show counter
        tick   - increase counter
        reset  - reset counter
        $ ??
        hello - hello world
        echo - show the supplied params
        cal - do simple math
        line - pass a line to cli engine
        tokens - pass tokens to cli engine
        count - counter operations
        count show - show counter
        count tick - increase counter
        count reset - reset counter
        logout - end this session
        $ count show
        0
        $ count tick
        $ count show
        1
        $ count reset
        $ count show
        0
        $ logout
        logout
        MediaTek IoT Solution
        login: admin
        password: ********
        $ logout
        logout
        MediaTek IoT Solution
        login:

*/
/**
 * @}
 * @}
 * @}
 */
